/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OOP;

import javax.swing.JOptionPane;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

/**
 *
 * @author hp
 */
public class booking extends javax.swing.JFrame {

    /**
     * Creates new form booking
     */
    public booking() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        days = new javax.swing.JLabel();
        days_text = new javax.swing.JTextField();
        check_in = new javax.swing.JLabel();
        check_in_text = new javax.swing.JTextField();
        description = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        book = new javax.swing.JButton();
        book.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookButtonActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Room Booking Menu");

        days.setText("Days:");

        days_text.setPreferredSize(new java.awt.Dimension(88, 26));
        days_text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                days_textActionPerformed(evt);
            }
        });

        check_in.setText("Check in:");
        check_in_text.setForeground(new java.awt.Color(204, 204, 204));
        check_in_text.setText("(yyyy-mm-dd)");
        
        check_in_text.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (check_in_text.getText().equals("(yyyy-mm-dd)")) {
                    check_in_text.setText("");
                    check_in_text.setForeground(new java.awt.Color(0, 0, 0)); // Set to default text color
                }
            }
        
            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (check_in_text.getText().isEmpty()) {
                    check_in_text.setForeground(new java.awt.Color(204, 204, 204));
                    check_in_text.setText("(yyyy-mm-dd)");
                }
            }
        });

        description.setText("Description");
        description.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descriptionButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Additional services:");

        jCheckBox1.setText("Cleaning service");

        jCheckBox2.setText("Food and drink service");

        jCheckBox3.setText("Laundry service");

        book.setText("Book");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(days)
                                .addGap(18, 18, 18)
                                .addComponent(days_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(description)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(check_in)
                                    .addGap(18, 18, 18)
                                    .addComponent(check_in_text, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel2)
                            .addComponent(jCheckBox1)
                            .addComponent(jCheckBox3)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(book)
                                .addComponent(jCheckBox2)))))
                .addContainerGap(118, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(Exit)
                .addGap(103, 103, 103))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(description)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(days_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(days))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(check_in_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(check_in))
                .addGap(32, 32, 32)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox2)
                .addGap(18, 18, 18)
                .addComponent(jCheckBox3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Exit)
                    .addComponent(book))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
        try {
            // Read rates from rates.txt
            Map<String, Double> rates = new HashMap<>();
            try (BufferedReader ratesReader = new BufferedReader(new FileReader("src/main/java/OOP/rates.txt"))) {
                String line;
                while ((line = ratesReader.readLine()) != null) {
                    String[] parts = line.split(", ");
                    if (parts.length == 2) {
                        rates.put(parts[0].trim(), Double.parseDouble(parts[1].trim()));
                    }
                }
            } catch (IOException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Error reading rates file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        
            double basePrice = rates.get("Room per Day");
            double cleaningServiceRate = rates.get("Cleaning Service");
            double foodAndDrinkServiceRate = rates.get("Food and Drink Service");
            double laundryServiceRate = rates.get("Laundry Service");
            double taxRate = rates.get("Service Tax");
        
            int daysValue = Integer.parseInt(days_text.getText());
            if (daysValue <= 0) {
                javax.swing.JOptionPane.showMessageDialog(this, "Days cannot be 0 or less", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        
            UserSession session = UserSession.getInstance();
            String userID = session.getUserID();
            String checkInDate = check_in_text.getText();

            // Validate check-in date
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate checkInLocalDate;
            try {
                checkInLocalDate = LocalDate.parse(checkInDate, formatter);
            } catch (DateTimeParseException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid date format. Please use yyyy-MM-dd.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
    
            if (checkInLocalDate.isBefore(LocalDate.now())) {
                javax.swing.JOptionPane.showMessageDialog(this, "Check-in date cannot be in the past.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            boolean cleaningService = jCheckBox1.isSelected();
            boolean foodAndDrinkService = jCheckBox2.isSelected();
            boolean laundryService = jCheckBox3.isSelected();
            double price = basePrice * daysValue * (1 + taxRate);
        
            if (cleaningService) {
                price += cleaningServiceRate;
            }
            if (foodAndDrinkService) {
                price += foodAndDrinkServiceRate;
            }
            if (laundryService) {
                price += laundryServiceRate;
            }
        
            String bookingId;
            try {
                bookingId = generateBookingId();
            } catch (IOException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Error generating booking ID", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
        
            boolean alreadyBooked = false;
            try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/booking.txt"))) {
                String line;
                while ((line = reader.readLine()) != null) {
                    if (line.contains(userID)) {
                        alreadyBooked = true;
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (alreadyBooked) {
                javax.swing.JOptionPane.showMessageDialog(this, "You have already booked a room.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Read available rooms from room.txt
            List<String> availableRooms = new ArrayList<>();
            List<String> roomLines = new ArrayList<>();
            try (BufferedReader roomReader = new BufferedReader(new FileReader("src/main/java/OOP/Room.txt"))) {
                String line;
                while ((line = roomReader.readLine()) != null) {
                    roomLines.add(line);
                    String[] parts = line.split(", ");
                    if (parts.length == 2 && "available".equalsIgnoreCase(parts[1].trim())) {
                        availableRooms.add(parts[0].trim());
                    }
                }
            } catch (IOException e) {
                javax.swing.JOptionPane.showMessageDialog(this, "Error reading room file", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
    
            if (availableRooms.isEmpty()) {
                javax.swing.JOptionPane.showMessageDialog(this, "No rooms available.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Choose a random available room
            Random random = new Random();
            String chosenRoom = availableRooms.get(random.nextInt(availableRooms.size()));


            LocalDateTime bookingDate = LocalDateTime.now(); // Replace with actual booking date
            String datebook = bookingDate.toLocalDate().toString();
            DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
            String time = bookingDate.toLocalTime().format(timeFormatter);
            String data = bookingId + ", " + datebook + ", " + time + "," + userID + ", " + checkInDate + ", " + daysValue + ", " + cleaningService + ", " + foodAndDrinkService + ", " + laundryService + ", " + price + ", " + "pending" + ", " + chosenRoom;

            // String bookingDate = getCurrentTime();
            // String data = bookingId + ", " + bookingDate + ", " + userID + ", " + checkInDate + ", " + daysValue + ", " + cleaningService + ", " + foodAndDrinkService + ", " + laundryService + ", " + price + ", " + "pending" + ", " + chosenRoom;

            try (BufferedWriter writer = new BufferedWriter(new FileWriter("src/main/java/OOP/booking.txt", true))) {
                writer.write(data + "\n");
            } catch (IOException e) {
                e.printStackTrace();
            }

            // Update room status to unavailable
            try (BufferedWriter roomWriter = new BufferedWriter(new FileWriter("src/main/java/OOP/Room.txt"))) {
                for (String roomLine : roomLines) {
                    if (roomLine.startsWith(chosenRoom + ", ")) {
                        roomWriter.write(chosenRoom + ", unavailable\n");
                    } else {
                        roomWriter.write(roomLine + "\n");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            JOptionPane.showMessageDialog(this, "                                 Booking successful!\r\nYour Room Number is: " + chosenRoom + "\n" + "Please complete your payment within 24 hours to the APU hostel management confirm your reservation." + "\n" + "Failure to do so will result in the cancellation of your booking ID.");
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid number format", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        
    }                       

    private String getCurrentTime() {
    LocalDateTime now = LocalDateTime.now();
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    return now.format(formatter);
    }


    private void days_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_days_textActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_days_textActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        Resident re = new Resident();
        re.setVisible(true);
        this. dispose();
    }//GEN-LAST:event_ExitActionPerformed

    public static String generateBookingId() throws IOException {
        String filePath = "src/main/java/OOP/booking.txt";
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
    
        int count = 0;
        while (reader.readLine() != null) {
            count++;
        }
        reader.close();
    
        String prefix = "B";
        String newBookingId = prefix + String.format("%02d", count + 1);
    
        return newBookingId;
    }

    private void descriptionButtonActionPerformed(java.awt.event.ActionEvent evt) {
        javax.swing.JOptionPane.showMessageDialog(this,
            "Note:\n" +
            "1) Every room only has enough capacity to hold 1 person.\n" +
            "2) The price for a single room is RM 50 per day.\n" +
            "3) Every resident is required to make payments to\n" +
            "   APU hostel management in 24 hours after booking\n" +
            "   in order to confirm your stay within 24 hours\n" +
            "   after booking.\n\n" +
            "Additional services:\n" +
            "1) Cleaning Service\n" +
            "2) Food and Drink Service\n" +
            "3) Laundry Service"
        );
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(booking.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new booking().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JButton book;
    private javax.swing.JLabel check_in;
    private javax.swing.JTextField check_in_text;
    private javax.swing.JLabel days;
    private javax.swing.JTextField days_text;
    private javax.swing.JButton description;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}