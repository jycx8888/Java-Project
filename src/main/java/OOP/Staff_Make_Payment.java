/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OOP;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

import javax.swing.JOptionPane;

/**
 *
 * @author Justin Yong
 */
public class Staff_Make_Payment extends javax.swing.JFrame {

    /**
     * Creates new form MakePayment
     */
    public Staff_Make_Payment() {
        initComponents();
        setLocationRelativeTo(null);
        UserSession session = UserSession.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BookingIDTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        SearchBookingID = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        FullNameTextField = new javax.swing.JTextField();
        EmailTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        PhoneNumberTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        CheckInDateTextField = new javax.swing.JTextField();
        DaysTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Proceed = new javax.swing.JButton();
        CleaningServiceCheckBox = new javax.swing.JCheckBox();
        FoodAndDrinkServiceCheckBox = new javax.swing.JCheckBox();
        LaundryServiceCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        RoomTextField = new javax.swing.JTextField();
        Exit = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        ResidentIDTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        PersonTextField = new javax.swing.JTextField();
        DamageCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 255, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Make Payment");

        jLabel2.setText("BookingID:");

        SearchBookingID.setText("Search");
        SearchBookingID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBookingIDActionPerformed(evt);
            }
        });

        jLabel3.setText("Full Name:");

        jLabel4.setText("Email:");

        jLabel5.setText("Phone Number:");

        jLabel6.setText("Check-In Date:");

        jLabel7.setText("Days:");

        jLabel8.setText("Additional Service:");

        Proceed.setText("Proceed");
        Proceed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProceedActionPerformed(evt);
            }
        });

        CleaningServiceCheckBox.setText("Cleaning Service");
        CleaningServiceCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CleaningServiceCheckBoxActionPerformed(evt);
            }
        });

        FoodAndDrinkServiceCheckBox.setText("Food and Drink Service");

        LaundryServiceCheckBox.setText("Laundry Service");

        jLabel9.setText("Room: ");

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        jLabel10.setText("Resident ID:");

        jLabel11.setText("Person: ");

        DamageCheckBox.setText("Damage");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(PersonTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DaysTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CheckInDateTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PhoneNumberTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ResidentIDTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(EmailTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FullNameTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BookingIDTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RoomTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addComponent(SearchBookingID))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jLabel9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(127, 127, 127)
                                .addComponent(FoodAndDrinkServiceCheckBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(290, 290, 290)
                                .addComponent(LaundryServiceCheckBox))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(CleaningServiceCheckBox)
                                    .addComponent(DamageCheckBox))
                                .addGap(281, 281, 281))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(Proceed)
                        .addGap(53, 53, 53)
                        .addComponent(Exit)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(BookingIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SearchBookingID)))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(ResidentIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(FullNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(PhoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(CheckInDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(EmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DaysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(PersonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(RoomTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CleaningServiceCheckBox)
                    .addComponent(FoodAndDrinkServiceCheckBox)
                    .addComponent(LaundryServiceCheckBox))
                .addGap(18, 18, 18)
                .addComponent(DamageCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Proceed)
                    .addComponent(Exit))
                .addGap(29, 29, 29))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 590));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchBookingIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBookingIDActionPerformed
        // TODO add your handling code here
        String bookingId = BookingIDTextField.getText().trim();

        if (bookingId.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Booking ID cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Read booking information from booking.txt based on booking ID
        boolean bookingFound = false;
        String paymentStatus = "";
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(", ");
                if (parts.length >= 15 && parts[0].trim().equals(bookingId)) {
                    bookingFound = true;
                    if ("cancelled".equals(parts[12].trim())) {
                        JOptionPane.showMessageDialog(this, "Booking was cancelled.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }else if("paid".equals(parts[13].trim())){
                        JOptionPane.showMessageDialog(this, "Booking was already paid.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }else if("confirmed".equals(parts[12].trim()) && "unpaid".equals(parts[13].trim())){
                    CheckInDateTextField.setText(parts[4].trim());
                    DaysTextField.setText(parts[5].trim());
                    CleaningServiceCheckBox.setSelected(Boolean.parseBoolean(parts[7].trim()));
                    FoodAndDrinkServiceCheckBox.setSelected(Boolean.parseBoolean(parts[8].trim()));
                    LaundryServiceCheckBox.setSelected(Boolean.parseBoolean(parts[9].trim()));
                    PersonTextField.setText(parts[6]);
                    DamageCheckBox.setSelected(Boolean.parseBoolean(parts[11].trim()));
                    findResidentInfoById(parts[3].trim());
                    // Populate other fields as needed
                    break;
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading booking data", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (!bookingFound) {
            JOptionPane.showMessageDialog(this, "Booking not found", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Read room information from Room_Availability.txt based on booking ID
        Set<String> rooms = new HashSet<>();
        try (BufferedReader roomReader = new BufferedReader(new FileReader("src/main/java/OOP/Room_Availability.txt"))) {
            String line;
            while ((line = roomReader.readLine()) != null) {
                String[] parts = line.split(", ");
                if (parts.length == 3 && parts[2].trim().equals(bookingId)) {
                    rooms.add(parts[1].trim());
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading room availability data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        // Display room information without square brackets
        RoomTextField.setText(String.join(", ", rooms));

    }//GEN-LAST:event_SearchBookingIDActionPerformed
    
    private void findResidentInfoById(String residentId) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/Resident_Info.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(", ");
                if (parts.length == 5 && parts[0].equals(residentId)) {
                    ResidentIDTextField.setText(parts[0]);
                    FullNameTextField.setText(parts[1]);
                    EmailTextField.setText(parts[2]);
                    PhoneNumberTextField.setText(parts[3]);
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "No resident found with the provided Resident ID.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void CleaningServiceCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CleaningServiceCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CleaningServiceCheckBoxActionPerformed

    private void ProceedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProceedActionPerformed
        // TODO add your handling code here:
        String bookingID = BookingIDTextField.getText().trim();
        String checkInDate = CheckInDateTextField.getText().trim();
        String daysText = DaysTextField.getText().trim();
        String personText = PersonTextField.getText().trim();
        String residentID = ResidentIDTextField.getText().trim();
        String residentName = FullNameTextField.getText().trim();
        String residentEmail = EmailTextField.getText().trim();
        String residentPhoneNumber = PhoneNumberTextField.getText().trim();
        String roomText = RoomTextField.getText().trim();
    
        // Validate that all required fields are not empty
        if (bookingID.isEmpty() || checkInDate.isEmpty() || daysText.isEmpty() || personText.isEmpty() ||
            residentID.isEmpty() || residentName.isEmpty() || residentEmail.isEmpty() || residentPhoneNumber.isEmpty() ||
            roomText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled out", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        int days = Integer.parseInt(daysText);
        int person = Integer.parseInt(personText);
        boolean cleaningService = CleaningServiceCheckBox.isSelected();
        boolean foodAndDrinkService = FoodAndDrinkServiceCheckBox.isSelected();
        boolean laundryService = LaundryServiceCheckBox.isSelected();
        boolean damage = DamageCheckBox.isSelected();

        // Read rates from rates.txt
        double roomRate = 0.0;
        double cleaningRate = 0.0;
        double foodAndDrinkRate = 0.0;
        double laundryRate = 0.0;
        double serviceTaxRate = 0.0;
        double damageRate = 0.0;
        try (BufferedReader ratesReader = new BufferedReader(new FileReader("src/main/java/OOP/rates.txt"))) {
            String line;
            while ((line = ratesReader.readLine()) != null) {
                String[] parts = line.split(", ");
                if (parts.length == 2) {
                    switch (parts[0].trim()) {
                        case "Room per Day":
                            roomRate = Double.parseDouble(parts[1].trim());
                            break;
                        case "Cleaning Service":
                            cleaningRate = Double.parseDouble(parts[1].trim());
                            break;
                        case "Food and Drink Service":
                            foodAndDrinkRate = Double.parseDouble(parts[1].trim());
                            break;
                        case "Laundry Service":
                            laundryRate = Double.parseDouble(parts[1].trim());
                            break;
                        case "Service Tax":
                            serviceTaxRate = Double.parseDouble(parts[1].trim());
                            break;
                        case "Damage Fee":
                            damageRate = Double.parseDouble(parts[1].trim());
                            break;   
                    }
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading rates file", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        // Calculate the quantities and amounts
        int roomQuantity = days * person;
        int cleaningQuantity = cleaningService ? days * person : 0;
        int foodAndDrinkQuantity = foodAndDrinkService ? days * person : 0;
        int laundryQuantity = laundryService ? days * person : 0;
    
        double roomAmount = roomRate * roomQuantity;
        double cleaningAmount = cleaningRate * cleaningQuantity;
        double foodAndDrinkAmount = foodAndDrinkRate * foodAndDrinkQuantity;
        double laundryAmount = laundryRate * laundryQuantity;
    
        double subtotal = roomAmount + cleaningAmount + foodAndDrinkAmount + laundryAmount;
        double serviceTax = subtotal * serviceTaxRate;
        int damagedRoomCount = getDamagedRoomCount(bookingID);
        double damageFee = ( damage ? damageRate : 0 ) * damagedRoomCount;
        double total = subtotal + serviceTax + damageFee;
    
        // Get room information from text field
        Set<String> rooms = new HashSet<>();
        for (String room : RoomTextField.getText().split(", ")) {
            rooms.add(room.trim());
        }
    
        // Generate a sequential Receipt ID based on the number of receipts
        int receiptCount = 0;
        try (BufferedReader receiptReader = new BufferedReader(new FileReader("src/main/java/OOP/Receipt.txt"))) {
            while (receiptReader.readLine() != null) {
                receiptCount++;
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading receipt data", "Error", JOptionPane.ERROR_MESSAGE);
        }
        String receiptID = String.format("RE%04d", receiptCount + 1);
    
        // Show the receipt
        Staff_Receipt receipt = new Staff_Receipt();
        receipt.setReceiptID(receiptID);
        receipt.setStaffID(UserSession.getInstance().getUserID());
        receipt.setProceedDate(Staff_Receipt.getLocalDateTime());
        receipt.setResidentID(residentID);
        receipt.setName(residentName);
        receipt.setEmail(residentEmail);
        receipt.setPhoneNumber(residentPhoneNumber);
        receipt.setBookingID(bookingID);
        receipt.setCheckInDate(checkInDate);
        receipt.setDays(days);
        receipt.setPerson(person);
        receipt.setUnitCost(roomRate, cleaningRate, foodAndDrinkRate, laundryRate);
        receipt.setQuantity(roomQuantity, cleaningQuantity, foodAndDrinkQuantity, laundryQuantity);
        receipt.setAmount(roomAmount, cleaningAmount, foodAndDrinkAmount, laundryAmount);
        receipt.setSubtotal(subtotal);
        receipt.setServiceTax(serviceTax);
        receipt.setTotal(total);
        receipt.setRooms(rooms);
        receipt.setDamage(damageFee);
        receipt.setVisible(true);

        // Clear all text fields and checkboxes
        BookingIDTextField.setText("");
        DaysTextField.setText("");
        PersonTextField.setText("");
        RoomTextField.setText("");
        ResidentIDTextField.setText("");
        FullNameTextField.setText("");
        EmailTextField.setText("");
        PhoneNumberTextField.setText("");
        CheckInDateTextField.setText("");
        CleaningServiceCheckBox.setSelected(false);
        FoodAndDrinkServiceCheckBox.setSelected(false);
        LaundryServiceCheckBox.setSelected(false);
        DamageCheckBox.setSelected(false);
    }//GEN-LAST:event_ProceedActionPerformed

    private int getDamagedRoomCount(String bookingID) {
        int count = 0;
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/checkroom.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] details = line.split(", ");
                if (details.length >= 4 && details[0].trim().equals(bookingID)) {
                    count++;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading checkroom data", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return count;
    }

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        Staff st = new Staff();
        st.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Staff_Make_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Staff_Make_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Staff_Make_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Staff_Make_Payment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Staff_Make_Payment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BookingIDTextField;
    private javax.swing.JTextField CheckInDateTextField;
    private javax.swing.JCheckBox CleaningServiceCheckBox;
    private javax.swing.JCheckBox DamageCheckBox;
    private javax.swing.JTextField DaysTextField;
    private javax.swing.JTextField EmailTextField;
    private javax.swing.JButton Exit;
    private javax.swing.JCheckBox FoodAndDrinkServiceCheckBox;
    private javax.swing.JTextField FullNameTextField;
    private javax.swing.JCheckBox LaundryServiceCheckBox;
    private javax.swing.JTextField PersonTextField;
    private javax.swing.JTextField PhoneNumberTextField;
    private javax.swing.JButton Proceed;
    private javax.swing.JTextField ResidentIDTextField;
    private javax.swing.JTextField RoomTextField;
    private javax.swing.JToggleButton SearchBookingID;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
