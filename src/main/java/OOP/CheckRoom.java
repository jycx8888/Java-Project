/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OOP;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Justin Yong
 */
public class CheckRoom extends javax.swing.JFrame {

    /**
     * Creates new form CheckRoom
     */
    public CheckRoom() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        BookingID = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Damage = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        RoomNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Description = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        Submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(204, 255, 153));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Check Room");

        jLabel2.setText("Booking ID:");

        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Room Condition");

        Damage.setText("Damage");

        jLabel4.setText("Room Number:");

        Description.setColumns(20);
        Description.setRows(5);
        jScrollPane1.setViewportView(Description);

        jLabel5.setText("Description:");

        Submit.setText("Submit");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Damage)
                                        .addComponent(jLabel3)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(15, 15, 15)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(BookingID, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGap(48, 48, 48)
                                                    .addComponent(jLabel1)))))
                                    .addGap(29, 29, 29)
                                    .addComponent(Search))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(18, 18, 18)
                                    .addComponent(RoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(Submit)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(BookingID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(Damage)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(RoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Submit)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        String bookingID = BookingID.getText().trim();
        boolean bookingFound = false;
    
        if (bookingID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Booking ID must be filled out", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] details = line.split(", ");
                if (details.length >= 15 && details[0].trim().equals(bookingID)) {
                    if(details[12].trim().equals("cancelled")) {
                        JOptionPane.showMessageDialog(this, "This booking has already been cancelled.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }else if(details[13].trim().equals("paid")) {
                        JOptionPane.showMessageDialog(this, "This booking has already been paid.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    bookingFound = true;
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading booking data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        if (bookingFound) {
            JOptionPane.showMessageDialog(this, "Booking ID found successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Booking ID not found", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SearchActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
        // TODO add your handling code here:
        String bookingID = BookingID.getText().trim();
        boolean isDamaged = Damage.isSelected();
        String roomNumber = RoomNumber.getText().trim();
        String description = Description.getText().trim();
        boolean bookingFound = false;

        if (bookingID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Booking ID must be filled out", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] details = line.split(", ");
                if (details.length >= 15 && details[0].trim().equals(bookingID)) {
                    if(details[12].trim().equals("cancelled")) {
                        JOptionPane.showMessageDialog(this, "This booking has already been cancelled.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }else if(details[13].trim().equals("paid")) {
                        JOptionPane.showMessageDialog(this, "This booking has already been paid.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    bookingFound = true;
                    break;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading booking data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    
        if (!bookingFound) {
            JOptionPane.showMessageDialog(this, "Booking ID not found", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (isDamaged) {
            if (roomNumber.isEmpty() || description.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Room number and description must be filled out if there is damage", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Validate room numbers using room_availability.txt
            String[] roomNumberArray = roomNumber.split(",\\s*");
            for (String roomNumbers : roomNumberArray) {
                if (!validateRoomNumber(bookingID, roomNumbers)) {
                    JOptionPane.showMessageDialog(this, "Room number " + roomNumbers + " does not match the booking ID", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
    
            // Update checkroom.txt
            String staffID = UserSession.getInstance().getUserID();
            try (FileWriter writer = new FileWriter("src/main/java/OOP/checkroom.txt", true)) {
                for (String roomNumbers : roomNumberArray) {
                    writer.write(bookingID + ", " + staffID + ", " + roomNumbers + ", " + description + "\n");
                }
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error writing checkroom data", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Update room.txt
            for (String roomNumbers : roomNumberArray) {
                updateRoomStatus(roomNumbers, "unavailable");
            }

            // Update booking.txt
            updateBookingStatus(bookingID, "true");
        }

        JOptionPane.showMessageDialog(this, "Submission successful", "Success", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_SubmitActionPerformed

    private boolean validateRoomNumber(String bookingID, String roomNumber) {
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/room_availability.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] details = line.split(", ");
                if (details.length >= 3 && details[1].trim().equals(roomNumber) && details[2].trim().equals(bookingID)) {
                    return true;
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading room availability data", "Error", JOptionPane.ERROR_MESSAGE);
        }
        return false;
    }
    
    private void updateRoomStatus(String roomNumber, String status) {
        List<String> roomLines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/room.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(roomNumber + ", ")) {
                    String[] parts = line.split(", ");
                    parts[1] = status;
                    roomLines.add(String.join(", ", parts));
                } else {
                    roomLines.add(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading room data", "Error", JOptionPane.ERROR_MESSAGE);
        }

        try (FileWriter writer = new FileWriter("src/main/java/OOP/Room.txt")) {
            for (String line : roomLines) {
                writer.write(line + "\n");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing room data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateBookingStatus(String bookingID, String damageStatus) {
        List<String> bookingLines = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader("src/main/java/OOP/booking.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(", ");
                if (parts.length >= 15 && parts[0].trim().equals(bookingID)) {
                    parts[11] = damageStatus;
                    bookingLines.add(String.join(", ", parts));
                } else {
                    bookingLines.add(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error reading booking data", "Error", JOptionPane.ERROR_MESSAGE);
        }

        try (FileWriter writer = new FileWriter("src/main/java/OOP/booking.txt")) {
            for (String line : bookingLines) {
                writer.write(line + "\n");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing booking data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckRoom().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BookingID;
    private javax.swing.JCheckBox Damage;
    private javax.swing.JTextArea Description;
    private javax.swing.JTextField RoomNumber;
    private javax.swing.JButton Search;
    private javax.swing.JButton Submit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
