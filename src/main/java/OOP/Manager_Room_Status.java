/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package OOP;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Justin Yong
 */
public class RoomStatus extends javax.swing.JFrame {

    private DefaultTableModel model = new DefaultTableModel();;
    private String columnNames[] = {"Room Number", "Status"};
    private Map<String, String> damageMap;

    public RoomStatus() {
        initComponents();
        setLocationRelativeTo(null);
        model = (DefaultTableModel) jTable1.getModel();
        model.setColumnIdentifiers(columnNames);
        damageMap = new HashMap<>();
        loadRoomData();
        loadDamageData();
    }

    private void loadRoomData() {
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/OOP/Room.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String data[] = line.split(", ");
                if (data.length == 2) {
                    String roomNumber = data[0].trim();
                    String status = data[1].trim();
                    model.addRow(new Object[]{roomNumber, status});
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading room data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadDamageData() {
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/OOP/checkroom.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String data[] = line.split(", ");
                if (data.length == 4) {
                    String roomNumber = data[2].trim();
                    String damageDescription = data[3].trim();
                    damageMap.put(roomNumber, damageDescription);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error loading damage data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Exit = new javax.swing.JButton();
        SeeDetails = new javax.swing.JButton();
        MakeAvailable = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Room Status");

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });

        SeeDetails.setText("See Details");
        SeeDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeDetailsActionPerformed(evt);
            }
        });

        MakeAvailable.setText("Make Available");
        MakeAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakeAvailableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(SeeDetails)
                        .addGap(18, 18, 18)
                        .addComponent(MakeAvailable)
                        .addGap(18, 18, 18)
                        .addComponent(Exit)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SeeDetails)
                    .addComponent(Exit)
                    .addComponent(MakeAvailable))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        Manager mg = new Manager();
        mg.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_ExitActionPerformed

    private void SeeDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeDetailsActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String roomNumber = (String) jTable1.getValueAt(selectedRow, 0);
            String status = (String) jTable1.getValueAt(selectedRow, 1);
            String damage = damageMap.getOrDefault(roomNumber, "None");

            if (status.equalsIgnoreCase("Unavailable")) {
                damage = damageMap.getOrDefault(roomNumber, "No damage description available.");
            } else {
                damage = "None";
            }

            JOptionPane.showMessageDialog(this, "Room Number: " + roomNumber + "\nRoom Condition: " + status + "\nDamage: " + damage, "Room Details", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a room to see details.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_SeeDetailsActionPerformed

    private void MakeAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakeAvailableActionPerformed
        // TODO add your handling code here:
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow != -1) {
            String roomNumber = (String) jTable1.getValueAt(selectedRow, 0);
            String status = (String) jTable1.getValueAt(selectedRow, 1);

            if (status.equalsIgnoreCase("unavailable")) {
                int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to make this room available?", "Confirm", JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    // Change status to available in the table
                    jTable1.setValueAt("available", selectedRow, 1);

                    // Update Room.txt
                    updateRoomStatus(roomNumber, "available");

                    // Remove entry from CheckRoom.txt
                    removeDamageEntry(roomNumber);

                    JOptionPane.showMessageDialog(this, "Room " + roomNumber + " is now available.", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "The selected room is already available.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a room to make available.", "Warning", JOptionPane.WARNING_MESSAGE);
        } 
    }//GEN-LAST:event_MakeAvailableActionPerformed

    private void updateRoomStatus(String roomNumber, String newStatus) {
        List<String> fileContent = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/OOP/Room.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(", ");
                if (data[0].trim().equals(roomNumber)) {
                    fileContent.add(roomNumber + ", " + newStatus);
                } else {
                    fileContent.add(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating room status: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter("src/main/java/OOP/Room.txt"))) {
            for (String line : fileContent) {
                bw.write(line);
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing updated room data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void removeDamageEntry(String roomNumber) {
        List<String> fileContent = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new FileReader("src/main/java/OOP/checkroom.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(", ");
                if (!data[2].trim().equals(roomNumber)) {
                    fileContent.add(line);
                }
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error updating damage data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter("src/main/java/OOP/checkroom.txt"))) {
            for (String line : fileContent) {
                bw.write(line);
                bw.newLine();
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error writing updated damage data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoomStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoomStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoomStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoomStatus.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoomStatus().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Exit;
    private javax.swing.JButton MakeAvailable;
    private javax.swing.JButton SeeDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
